-------------->server\email_smtp_utils.py

import threading
import queue
import json
import uuid
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
from django.http import JsonResponse
import time

TEMPLATE_FILE = "email_template.html"

# Create a queue for email processing
email_queue = queue.Queue()


# **Email Worker Thread** (Processes emails from the queue with delays to prevent throttling)
def email_worker():
    while True:
        to_email, name, title, total_questions, score = email_queue.get()
        if to_email is None:  # Exit signal
            break

        try:
            send_email_smtp(to_email, name, title, total_questions, score)
        except Exception as e:
            print(f"‚ùå Error sending email to {to_email}: {e}")
        email_queue.task_done()
        time.sleep(1)  # Adding delay between emails to avoid rate limiting


# Start the worker thread
email_thread = threading.Thread(target=email_worker, daemon=True)
email_thread.start()


# Function to add email to the queue
def queue_email(to_email, name, title, total_questions, score):
    email_queue.put((to_email, name, title, total_questions, score))


# **HTML Template Renderer**
def render_email_template(name, title, total_questions, score):
    with open(TEMPLATE_FILE, "r", encoding="utf-8") as file:
        template = file.read()

    return (
        template.replace("{{name}}", name)
        .replace("{{title}}", title)
        .replace("{{total_questions}}", str(total_questions))
        .replace("{{score}}", str(score))
    )


# **SMTP Email Sender Function with Exponential Backoff**
def send_email_smtp(to_email, name, title, total_questions, score):
    from_email = "aptitude@krishtec.co.in"
    password = "KRISHtec@5747"
    attempt = 0
    delay = 5  # Initial retry delay

    while attempt < 5:  # Retry up to 5 times
        try:
            current_datetime = datetime.now().strftime("%d/%m/%Y %H:%M")
            msg = MIMEMultipart()
            msg["From"] = from_email
            msg["To"] = to_email
            msg["Subject"] = (
                f"KRISHTEC - üìä Your Quiz Score Report - {current_datetime}"
            )
            html_content = render_email_template(name, title, total_questions, score)
            msg.attach(MIMEText(html_content, "html"))

            server = smtplib.SMTP("mail.krishtec.co.in", 587)
            server.starttls()
            server.login(from_email, password)
            server.sendmail(from_email, to_email, msg.as_string())
            server.quit()
            print(f"‚úÖ Email sent to {to_email}")
            return "‚úÖ Email sent successfully!"
        except smtplib.SMTPException as e:
            print(f"‚ö†Ô∏è SMTP Error: {e}")
            attempt += 1
            time.sleep(delay)
            delay *= 2  # Increase delay exponentially on failure
    print(f"‚ùå Failed to send email to {to_email} after retries.")
    return f"‚ùå Failed to send email to {to_email}"

-------------------->server\views.py

from .email_utils import send_email //
from .email_smtp_utils import queue_email


def finish_test(request):
    if request.method != "POST":
        return JsonResponse({"error": "Invalid request method"}, status=405)

    try:
        # Parse the incoming JSON payload
        payload = json.loads(request.body)

        # Extract required data
        user_id = payload.get("user_id")
        topic_id = payload.get("topic_id")
        subtopic_id = payload.get("subtopic_id")
        title_id = payload.get("title_id")
        type = payload.get("type")
        start_at = payload.get("start_at")
        finished_at = payload.get("finished_at")
        status = payload.get("status")
        score = payload.get("score")
        total_questions = payload.get("total_questions")
        report_data = payload.get("report", [])

        # Validate required fields
        if not all([user_id, topic_id, subtopic_id, title_id, type]):
            return JsonResponse(
                {"error": "Missing required fields in payload"}, status=400
            )

        # Fetch related objects
        user = User.objects.filter(user_id=user_id).first()
        topic = Topic.objects.filter(topic_id=topic_id).first()
        subtopic = SubTopic.objects.filter(subtopic_id=subtopic_id).first()
        test = Test.objects.filter(title_id=title_id).first()

        if not all([user, topic, subtopic, test]):
            return JsonResponse(
                {"error": "Invalid references for user, topic, subtopic, or test"},
                status=404,
            )

        # Generate unique test ID
        test_u_id = str(uuid.uuid4())

        # Create a new TestHistory entry
        test_history = TestHistory.objects.create(
            test_id=test_u_id,
            user_id=user,
            topic_id=topic,
            subtopic_id=subtopic,
            title_id=test,
            type=type,
            title=test.title,  # Fetching title from Test model
            start_at=start_at,
            finished_at=finished_at,
            status=status,
            score=score,
            total_question=total_questions,
        )

        # Save reports
        for report_item in report_data:
            Report.objects.create(
                test_id=test_history,
                report=report_item,
            )

        # Retrieve User Details (Name, Phone Number)
        user_name = user.name
        user_phone = user.phone_number
        user_email = user.email

        # Retrieve Title from Test
        test_title = test.title

        # Get existing row count (excluding header)
        existing_data = sheet.get_all_values()
        row_count = len(existing_data)

        # Prepare Data for Google Sheet
        new_entry = [
            user_name,  # User Name
            user_phone,  # User Phone Number
            test_title,  # Test Title
            total_questions,  # Total Questions
            score,  # Score
        ]

        # Append Data to Google Sheet
        new_row = [row_count] + new_entry  # S.No is row count
        sheet.append_row(new_row)

        try:
            queue_email(user_email, user_name, test_title, total_questions, score)
        except Exception as err:
            print("Error senting email : " + str(err))

        return JsonResponse(
            {
                "message": "Test finished successfully and stored in Google Sheets",
                "testID": test_u_id,
            },
            status=200,
        )

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return JsonResponse({"error": f"An error occurred: {str(e)}"}, status=500)
